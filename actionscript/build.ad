#!/bin/sh
################################################################################
##
##	Adrian C. Miranda <adriancmiranda@gmail.com>
##	
##	References:
##	http://help.adobe.com/en_US/air/build/WS901d38e593cd1bac1e63e3d128cdca935b-8000.html
##	
##	To make build executable:
##	$ chmod 775 build.ad
##
##	Usage:
##	$ cd path/to/work
##	$ sh build.ad help
##	
##	@todo:
##	$ Hit esc in compile error.
##	
################################################################################
#
#
#	> config
#
#
################################################################################
# 
# info
# 
appname="boot"

#
# structure
#
bin="publish"
src="sources"

#
# build index
#
as="$src/classes/$appname.as"
swf="$bin/$appname.swf"
air="$bin/$appname.air"
html="$bin/index.html"

#
# class paths
#
sourcespath="$src/classes/ $src/libs/"
librarypath="$src/swc/"

#
# previews
#
preview0=$swf
preview1=$html
preview2="http://localhost:8000/"

#
# support
#
targetplayer=11.1
flashlog="/Users/adrianmiranda/Library/Preferences/Macromedia/Flash\ Player/Logs/flashlog.txt"
flexsdk="/Users/adrianmiranda/addons/SDKs/flex_sdk_4.6.0"
airsdk="/Users/adrianmiranda/addons/SDKs/air_sdk_3.6.0"
adt="$airsdk/bin/adt"
swc="$flexsdk/frameworks/libs/framework.swc $librarypath"
mxmlc="$flexsdk/bin/mxmlc"
asdoc="$flexsdk/bin/asdoc"
vars="-define CONFIG::LOGGING true -define CONFIG::PLATFORM true -define CONFIG::MOCK false -define CONFIG::WEB false"

################################################################################
#
#
#	> exec
#
#
################################################################################
#
# utils
#
function float_condition() {
	local cond=0
	if [[ $# -gt 0 ]]; then
		cond=$(echo "$*" | bc -q 2>/dev/null)
		if [[ -z "$cond" ]]; then cond=0; fi
		if [[ "$cond" != 0  &&  "$cond" != 1 ]]; then cond=0; fi
	fi
	local stat=$((cond == 0))
	return $stat
}

#
# define target player
#
if float_condition ''$targetplayer' > 10.1'; then
	vars="-target-player=$targetplayer $vars -define CONFIG::FLASH_10_1 false"
else
	vars="-target-player=$targetplayer $vars -define CONFIG::FLASH_10_1 true"
fi

#
# set options
#
if [ "$2" = "r" ]; then # release
	options="-static-link-runtime-shared-libraries=true -use-network=false -incremental=false -keep=false -debug=false $vars"
else # debug
	options="-static-link-runtime-shared-libraries=true -use-network=false -incremental=false -keep=false -debug=true $vars"
fi

#
# run mxmlc
#
if [ "$1" != "help" ] && [ "$1" != "l" ] && [ "$1" != "ll" ] && [ "$1" != "llh" ]; then
	echo ":: Building $swf in $bin \n"
	startTime=`eval date +%s`
	$mxmlc $as -o $swf -source-path $sourcespath -library-path $swc $options
	endTime=`eval date +%s`

	# 
	# run adt
	# 
	if [ "$1" = "air" ]; then
		echo "\n:: Building $air in $bin \n"
		
		# revision
		revision=`cat revision`
		echo "REVISION $revision"
		echo $((revision+1)) > revision
		
		# update xml config (http://www.grymoire.com/Unix/Sed.html)
		APP_SWF_TREATED=`echo $swf | sed 's/\./\\\\./g'`
		sed -e "s/APP_REVISION/$revision/g" \
			-e "s/APP_NAME/$appname/g" $appname.xml > $appname-app.xml
			# -e "s/APP_SWF/$APP_SWF_TREATED/g" $appname.xml > $appname-app.xml
		
		# remove previous versions
		rm -Rf *.air *.dmg *.ipa
		
		# uinstall previous version
		# $adt -uninstallApp -platformsdk $airsdk -appid $appname
		
		# create certificate
		$adt -certificate -cn AM -ou AM -o AM -c BR -validityPeriod 2 1024-RSA certificate.p12 "$appname"

		# dependencies
		directories="$bin/content"
		
		# compile air
		$adt -version
		$adt -package -storetype pkcs12 -keystore certificate.p12 -storepass "$appname" $air $appname-app.xml $swf $directories
		
		if [ "$2" = "r" ]; then
			echo "+> Installing $appname"
			open $air
		fi
	fi

	let PTIME=($endTime - $startTime)
	echo "\n:: Decommisioning Previous Compile"
	echo ":: Built in $PTIME seconds"
fi

#
# debug in terminal
#
if [ "$2" = "d" ]; then
	tail -f "$flashlog"
fi

#
# launch previews
#
if [ "$1" = "r" ] || [ "$1" = "l" ]; then # run
	echo " + Launch Booting Instances in player"
	open $preview0
elif [ "$1" = "rl" ] || [ "$1" = "ll" ]; then # run local
	echo " + Launch Booting Instances in browser"
	open $preview1
elif [ "$1" = "ssr" ]; then # search strings recursively in files
	if [ "$3" ]; then
		echo " + Rerouting search to $3"
		cd "$3"
	fi
	echo ":: Searching in ./$3 by $2 \n"
	find ./ -exec grep -Hn "$2" {} \;
	echo "\n:: Decommisioning Previous Search \n"
elif [ "$1" = "rlh" ] || [ "$1" = "llh" ]; then # run localhost
	echo " + Rerouting $preview2 to $bin"
	cd "$bin"
	open $preview2
	echo "   +> Booting $preview2 in $bin"
	echo "      [ Press ctrl+c to get out ] \n"
	python -m SimpleHTTPServer
	echo " << traffic successfully CANCELED"
elif [ "$1" = "help" ] || [ "$1" = "h" ]; then # help user
	echo "usage:  sh build.ad [l][ll][llh][r][rl][rlh][ssr[=<string>][=<path>]][help]"
	echo "\tsh build.ad <command> [<args>]"
	echo "\nThe most commonly used git commands are:"
	echo "   l\tLaunch"
	echo "   ll\tLaunch local"
	echo "   llh\tLaunch localhost"
	echo "   r\tRun"
	echo "   rl\tRun local"
	echo "   rlh\tRun localhost"
	echo "   ssr\tSearch strings recursively in files"
	echo "   air\tGenerate Air file"
	echo "-"
fi